Name:- Kamlesh Rajendr Jadhav
Roll No:- 27  Div:- B
Batch:- B2 
			Assignment No :-1

#include<stdio.h>
void main()
{
int matrix[20][20],sparse[20][20],transpose[20][20],m,n,i,j,k=1,t=1,choice,loc,col_no,fast[20][20];  //Declaring Variables
int total[sparse[0][1]],index[sparse[0][1]+1];
printf("Enter the no. of rows\n");  //Taking no. of rows from user
scanf("%d",&m);
printf("Enter the no. of columns\n");  //Taking no. of columns from user
scanf("%d",&n);
printf("Enter the matrix elements\n");  //Storing them into 2D array(Matrix)
for(i=0;i<m;i++)
{
  for(j=0;j<n;j++)
  {
   scanf("%d",&matrix[i][j]);
  }
}



printf("Entered matrix is\n");  //Displaying the entered matrix
for(i=0;i<m;i++)
{
  for(j=0;j<n;j++)
  {
    printf("%d\t",matrix[i][j]);
  }
  printf("\n");
}



printf("The Sparse matrix representation is\n"); 
for(i=0;i<m;i++)
{
    for(j=0;j<n;j++)
    {
        if(matrix[i][j]!=0)  //Storing non-zero elements in another matrix(sparse)
        {
            sparse[k][0]=i;
            sparse[k][1]=j;
            sparse[k][2]=matrix[i][j];
            k++;
        }
    }
}
printf("Row column value\n");  //Storing values of columns,rows and count of non zero elements in 0'th place
sparse[0][0]=m;
sparse[0][1]=n;
sparse[0][2]=k-1;

for(i=0;i<k;i++)
{
    for(j=0;j<3;j++)
    {
        
        printf("%d\t",sparse[i][j]);  //Printing sparse matrix
    }
    printf("\n");
}
printf("\n1.Simple Transpose\n 2.Fast Transpose\n");
printf("Enter your choice\n");
scanf("%d",&choice);
switch(choice)  //Taking choice from the user
{
case 1 :
        printf("The simple transpose is\n");  
        transpose[0][0]=n;  //Storing column in row
        transpose[0][1]=m;  //Storing row in column
        transpose[0][2]=k-1;  //Storing value
        for(i=0;i<n;i++)
        {
            for(j=1;j<k;j++)
            {
                if(sparse[j][1]==i)
                {
                    transpose[t][0]=sparse[j][1];
                    transpose[t][1]=sparse[j][0];  //Storing the transpose elements
                    transpose[t][2]=sparse[j][2];
                    t++;
                }
            }
        }
        printf(" Row column Value\n");  //Displaying transpose matrix
        for(i=0;i<k;i++)
        {
            for(j=0;j<3;j++)
            {
                printf("%d\t",transpose[i][j]);
            }
            printf("\n");
        }
        break;

case 2 :
        printf("The fast transpose is \n");
        for(i=0;i<sparse[0][1];i++)  //Initially storing 0 in total array
        {
            total[i]=0;
        }
        for(i=1;i<=sparse[0][2];i++)  //Getting total count of the elements
        {
            col_no=sparse[i][1];
            total[col_no]++;
        }
        index[0]=1;  //Initially assign index[0] as 1
        for(i=1;i<=sparse[0][1];i++)
        {
            index[i]=index[i-1]+total[i-1];  //Getting the index array
        }
        fast[0][0]=sparse[0][1];  //Swapping row and column
        fast[0][1]=sparse[0][0];
        fast[0][2]=sparse[0][2];
        for(i=1;i<=sparse[0][2];i++)
        {
            col_no=sparse[i][1];  //Getting the index of sparse matrix element
            loc=index[col_no];  //Storing them in loc variable
            fast[loc][0]=sparse[i][1];  //Storing the swap elements in fast matrix
            fast[loc][1]=sparse[i][0];
            fast[loc][2]=sparse[i][2];
            index[col_no]++;  //Incrementing the index of col_no by 1
        }
        printf(" Row column Value\n");  //display the fast matrix
        for(i=0;i<=fast[0][2];i++)
        {
          for(j=0;j<3;j++)
          {
            printf("%d\t",fast[i][j]);
          }
          printf("\n");
        }
        break;

default:
        printf("Invalid choice\n");
}
}
