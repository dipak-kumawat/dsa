Name:- Kamlesh Rajendr Jadhav
Roll No:- 27  Div:- B
Batch:- B2 
			Assignment No :-3


#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<malloc.h>
#include<stdlib.h>

typedef struct node
{
	char cmodel[20];
	long int price;
	char cmanufac[20];
	int cap;
	struct node *rlink,*llink;
}NODE;

NODE *head=NULL,*newnode,*prev,*curr;
static int tot=0;
NODE* new_node()
{
	newnode=(NODE *) malloc(sizeof(NODE));

	printf("\nEnter car model:");
	scanf("%s",&newnode->cmodel);
	printf("\nEnter price:");
	scanf("%ld",&newnode->price);
	printf("\nEnter manufacturer:");
	scanf("%s",&newnode->cmanufac);
	printf("\nEnter engine capacity:");
	scanf("%d",&newnode->cap);
	newnode->llink=NULL;
	newnode->rlink=NULL;

	return newnode;
}

void create()
{
	int n;
	head=NULL;
	printf("\nEnter number of nodes:");
	scanf("%d",&n);

	while(n>0)
	{
		newnode=new_node();
		if(head==NULL)
		{
			head=newnode;
			prev=head;
		}
		else
		{
			prev->rlink=newnode;
			newnode->llink=prev;
			prev=newnode;
		}
		n--;
	}
}

void display()
{
	int tot=0;
	curr=head;
	while(curr!=NULL)
	{
		printf("\nMODEL:%s",curr->cmodel);
		printf("\nPRICE:%ld",curr->price);
		printf("\nMANUFACTURER:%s",curr->cmanufac);
		printf("\nENGINE CAPACITY:%d",curr->cap);
		curr=curr->rlink;
		tot++;
		printf("\n");
	}
	printf("Total node=%d",tot);
}

void insert()
{
	curr=head;
	while(curr->rlink!=NULL)
	{
		curr=curr->rlink;
	}
	newnode=new_node();
	newnode->rlink=curr->rlink;
	newnode->llink=curr;
	curr->rlink=newnode;
}

void delete()
{
	int i=0;
	char cn[20];
	printf("\nEnter car model");
	scanf("%s",cn);
	curr=head;
	while(strcmp(cn,curr->cmodel)!=0)
	{
		curr=curr->rlink;
		i++;
	}
	printf("%d",i);
	if(i==0)
	{
		head=head->rlink;
		head->llink=NULL;
		free(curr);
	}
	if(i>0 && i<tot)
	{
       (curr->rlink)->llink=curr->llink;
       (curr->llink)->rlink=curr->rlink;
       free(curr);
       }
       else
       {
       (curr->llink)->rlink=curr->rlink;
       free(curr);
       }
}

void update()
{
	int min,max,val;
	printf("\nEnter min and max value:");
	scanf("%d%d",&min,&max);
	printf("\nEnter new price:");
	scanf("%d",&val);
	curr=head;
	while(curr!=NULL)
	{
		if(curr->price>=min&&curr->price<=max)
		{
			curr->price=val;
		}
		curr=curr->rlink;
	}
}
void main()
{
	int ch;
	do{
		printf("\n 1-Create");
		printf("\n 2-Display");
		printf("\n 3-Insert");
		printf("\n 4-Delete");
		printf("\n 5-Update");
		printf("\n 6-Exit\n");
		printf("\n Enter your choice: ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				create();
				break;
			case 2:
				display();
				break;
			case 3:
				insert(head);
				break;
			case 4:
				delete();
				break;
			case 5:
				update();
				break;
			case 6:
			      exit(0);
			default:
			printf("Invalid");
			exit(0);
		}

	}while(1);

}