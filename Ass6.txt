
Name:- Kamlesh Rajendr Jadhav
Roll No:- 27  Div:- B
Batch:- B2 
			Assignment No :-6

#include<stdio.h>
#include<conio.h>
#define M 20
typedef struct tnode
{
  int data;
  struct tnode *lch, *rch;
}node;

int m = 0;

node *create()
{
  int val;
  node *newnode;
  newnode = (node *)malloc(sizeof(node));
  newnode->lch = NULL;
  newnode->rch = NULL;
  printf("\nEnter Data (if you don't want to add next node then enter 0):");
  scanf("%d",&val);
  if(val==0)
  {
      return NULL;
  }
  newnode->data = val;

  printf("\nEnter Left Child of %d\n",val);
  newnode->lch = create();

  printf("\nEnter Right Child of %d\n",val);
  newnode->rch = create();

  return newnode;
}

void preorder(node *root)
{
  if(root!=NULL)
  {
    printf("%d\n",root->data);
    preorder(root->lch);
    preorder(root->rch);
  }
}

void inorder(node *root)
{
  if(root!=NULL)
  {
    inorder(root->lch);
    printf("%d\n",root->data);
    inorder(root->rch);
  }
}

void postorder(node *root)
{
  if(root!=NULL)
  {
    postorder(root->lch);
    postorder(root->rch);
    printf("%d\n",root->data);
  }
}

node *mirror(node *root)
{
  node *temp;
  if(root!=NULL)
  {
    mirror(root->lch);
    mirror(root->rch);
    temp = root->lch;
    root->lch = root->rch;
    root->rch = temp;
  }
  return root;
}

int theight(node *root,int level)
{
  if(root!=NULL)
  {
    theight(root->lch,level+1);
    theight(root->rch,level+1);
  }
  if(level>m)
  m = level;

  return m-1;
}

void level_wise(node *root)
{
  node *dummy = (node *)malloc(sizeof(node));
  int front=0,rear=0;
  node *q[M], *temp;
  dummy->lch = root;
  dummy->rch = NULL;
  q[rear] = root;
  rear++;
  q[rear] = dummy;
  rear++;
  temp = q[front];
  front++;
  if(root!=NULL)
  {
    while(front!=rear)
    {
      if(temp!=dummy)
      {
        printf("%d ",temp->data);
        if(temp->lch!=NULL)
        {
            q[rear] = temp->lch;
            rear++;
        }
        if(temp->rch!=NULL)
        {
            q[rear] = temp->rch;
            rear++;
        }
      }
      else
      {
        q[rear] = dummy;
        rear++;
        printf("\n");
      }

      temp = q[front];
        front++;
    }
  }
}

void leafnodes(node *root)
{
  if(root!=NULL)
  {
    leafnodes(root->lch);
    leafnodes(root->rch);
    if(root->lch==NULL && root->rch==NULL)
    {
      printf("%d\n",root->data);
    }
  }
}

int main()
{
  node *root = NULL;
  int ch,level,height,i;
  do{
        printf("1. create\n");
        printf("2. Display(Preorder)\n");
        printf("3. Display(Inorder)\n");
        printf("4. Display(Postorder)\n");
        printf("5. Mirror Imaage\n");
        printf("6. Hieght of tree\n");
        printf("7. Leaf of node\n");
        printf("8. LEvel wise Printing\n");
        printf("9. Exits\n");
        printf("\n\nEnter Your Choice :");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                    root = create();
                    break;
            case 2:
                    printf("\nYour Entered Tree :\n");
                    preorder(root);
                    break;
            case 3:
                    printf("\nYour Entered Tree :\n");
                    inorder(root);
                    break;
            case 4:
                    printf("\nYour Entered Tree :\n");
                    postorder(root);
                    break;
            case 5:
                    root = mirror(root);
                    printf("\nTree Node are Mirrored Succesfully\n");
                    break;
            case 6:
                    height = theight(root,0);
                    printf("\nHeight of Your Tree : %d\n",height);
                    break;
            case 7:
                    printf("\nLeaf Nodes of the tree are :\n");
                    leafnodes(root);
                    break;
            case 8:
                    printf("\nLevel Wise Printing :\n");
                    level_wise(root);
                    printf("\n");
                    break;
            case 9:
                    exit(0);
                    break;
            default:
                    printf("\nEnter Valid Choice!");
                    break;

        }
    }while(ch!=9);
    return 0;
}
